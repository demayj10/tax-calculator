{"version":3,"sources":["lib/data/maritalStatus.ts","app/hooks.tsx","lib/taxBrackets/constants.ts","lib/taxBrackets/Federal-IncomeTax-Single.ts","lib/data/supportedStates.ts","lib/taxBrackets/Federal-IncomeTax-Married.ts","lib/federalTaxCalculator.ts","lib/data/dataItemType.ts","lib/taxBrackets/stateTaxes/OH-IncomeTax.ts","lib/stateIncomeTaxCalculator.ts","components/resultData/resultDataSlice.tsx","components/inputForm/inputFormSlice.tsx","components/selectMenu.tsx","components/textField.tsx","components/inputForm/inputForm.tsx","components/dataList/dataListItem.tsx","components/accordion/financialAccordionSummary.tsx","components/accordion/customizedAccordion.tsx","components/accordion/customizedAccordionDetails.tsx","components/resultData/federalResultData.tsx","components/resultData/stateResultData.tsx","components/resultData/resultData.tsx","App.tsx","lib/taxCalculator.ts","reportWebVitals.ts","app/store.tsx","index.tsx"],"names":["MaritalStatus","useAppSelector","useSelector","SOCIAL_SECURITY_TAX_WAGE_LIMIT","SOCIAL_SECURITY_TAX_RATE","MEDICARE_TAX_RATE","federalFirstBracket","minimumToQualify","taxRate","taxTotalToThisBracket","secondBracket","thirdBracket","fourthBracket","fifthBracket","sixthBracket","seventhBracket","federalIncomeSingleTaxBracketsArray","SupportedStates","MaritalStatusList","Single","MarriedJointly","MarriedSeparately","federalMarriedJointlyFirstBracket","marriedJointlySecondBracket","marriedJointlyThirdBracket","marriedJointlyFourthBracket","marriedJointlyFifthBracket","marriedJointlySixthBracket","marriedJointlySeventhBracket","federalIncomeTaxMarriedJointlyArray","federalMarriedSeparateFirstBracket","marriedSeparateSecondBracket","marriedSeparateFourthBracket","marriedSeparateFifthBracket","marriedSeparateSixthBracket","marriedSeparateSeventhBracket","federalIncomeTaxMarriedSeparateArray","calculateFederalIncomeTax","annualIncome","maritalStatus","federalIncomeTaxBracketList","maxMinimum","forEach","bracket","findFederalIncomeTaxBracket","findFederalIncomeTaxBracketList","taxAmount","calculateFederalTaxes","federalIncomeTaxRate","federalIncomeTaxAmount","socialSecurityTaxAmount","calculateSocialSecurityTax","medicareTaxAmount","calculateMedicareTax","socialSecurityTaxRate","medicareTaxRate","totalFederalTaxAmount","DataItemType","StatesWithoutIncomeTax","Washington","SupportedStatesList","Ohio","ohioFirstBracket","eighthBracket","ninthBracket","ohioIncomeTaxBracketsArray","ohioIncomeTaxBracketsObject","calculateStateTaxes","state","includes","stateIncomeTaxRate","stateIncomeTaxAmount","totalStateTaxAmount","hasStateIncomeTax","stateIncomeTaxBracket","calculateStateIncomeTax","stateIncomeBrackets","findStateIncomeTaxBracket","findStateTaxBracketList","resultDataSlice","createSlice","name","initialState","federal","grossAnnualIncome","totalTaxes","netAnnualIncome","showContent","reducers","updateResultData","action","payload","toggleContent","actions","selectResultData","resultDataReducer","selectedState","inputFormSlice","handleTextChange","field","value","resetInput","selectInputForm","inputFormReducer","SelectMenu","props","label","id","optionList","handleInputChange","testId","htmlFor","onChange","e","disabled","map","item","TextField","InputForm","inputFormProps","inputForm","dispatch","useDispatch","isEnabled","length","target","Button","variant","size","onClick","preventDefault","submitInput","submitForm","DataListItem","dataListItemProps","valueString","title","type","isSublist","formatterUSD","Intl","NumberFormat","style","currency","DollarAmount","format","Percentage","parseFloat","toFixed","toString","className","Paper","Typography","fontWeight","FinancialAccordionSummary","amount","ariaControls","CustomizedAccordionSummary","styled","AccordionSummary","align","CustomizedAccordion","Accordion","CustomizedAccordionDetails","AccordionDetails","FederalResultData","federalTaxData","StateResultData","ResultData","resultData","App","showResultContent","data","result","federalTaxes","stateTaxes","generateTaxReport","parseInt","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.109de7ce.chunk.js","sourcesContent":["export const enum MaritalStatus {\r\n    Single = 'Single',\r\n    MarriedJointly = 'Married filing jointly',\r\n    MarriedSeparately = 'Married separately separately',\r\n    DefaultForTesting = 'Default for testing',\r\n}\r\n\r\nexport const MaritalStatusList = [\r\n  MaritalStatus.Single,\r\n  MaritalStatus.MarriedJointly,\r\n  MaritalStatus.MarriedSeparately,\r\n];\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { AppDispatch, RootState } from './store';\r\n\r\n// Use throughout the app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = (): AppDispatch => useDispatch();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","export const SOCIAL_SECURITY_TAX_WAGE_LIMIT = 142800;\r\nexport const SOCIAL_SECURITY_TAX_RATE = 0.062;\r\n\r\nexport const MEDICARE_TAX_RATE = 0.0145;\r\n\r\nexport const TEN_THOUSAND = 10000;\r\nexport const ONE_HUNDRED_THOUSAND = 100000;\r\nexport const ONE_MILLION = 1000000;\r\n","import { TaxBracket } from '../../types';\r\n\r\nexport const federalFirstBracket: TaxBracket = {\r\n  minimumToQualify: 0,\r\n  taxRate: 0.10,\r\n  taxTotalToThisBracket: 0,\r\n};\r\nconst secondBracket: TaxBracket = {\r\n  minimumToQualify: 9876,\r\n  taxRate: 0.12,\r\n  taxTotalToThisBracket: 987.5,\r\n};\r\nconst thirdBracket: TaxBracket = {\r\n  minimumToQualify: 40126,\r\n  taxRate: 0.22,\r\n  taxTotalToThisBracket: 4617.5,\r\n};\r\nconst fourthBracket: TaxBracket = {\r\n  minimumToQualify: 85526,\r\n  taxRate: 0.24,\r\n  taxTotalToThisBracket: 14605.50,\r\n};\r\nconst fifthBracket: TaxBracket = {\r\n  minimumToQualify: 163301,\r\n  taxRate: 0.32,\r\n  taxTotalToThisBracket: 33271.50,\r\n};\r\nconst sixthBracket: TaxBracket = {\r\n  minimumToQualify: 207351,\r\n  taxRate: 0.35,\r\n  taxTotalToThisBracket: 47367.50,\r\n};\r\nconst seventhBracket: TaxBracket = {\r\n  minimumToQualify: 518401,\r\n  taxRate: 0.37,\r\n  taxTotalToThisBracket: 156235,\r\n};\r\n\r\nexport const federalIncomeSingleTaxBracketsArray: TaxBracket[] = [\r\n  federalFirstBracket,\r\n  secondBracket,\r\n  thirdBracket,\r\n  fourthBracket,\r\n  fifthBracket,\r\n  sixthBracket,\r\n  seventhBracket,\r\n];\r\n\r\nexport const federalIncomeSingleTaxBracketsObject = {\r\n  firstBracket: federalFirstBracket,\r\n  secondBracket,\r\n  thirdBracket,\r\n  fourthBracket,\r\n  fifthBracket,\r\n  sixthBracket,\r\n  seventhBracket,\r\n};\r\n","export const enum SupportedStates {\r\n    Ohio = 'Ohio',\r\n    Washington = 'Washington'\r\n}\r\n\r\nexport const StatesWithoutIncomeTax = [\r\n  SupportedStates.Washington,\r\n];\r\n\r\nexport const SupportedStatesList = [\r\n  SupportedStates.Washington,\r\n  SupportedStates.Ohio,\r\n];\r\n","import { TaxBracket } from '../../types';\r\n\r\nexport const federalMarriedJointlyFirstBracket: TaxBracket = {\r\n  minimumToQualify: 0,\r\n  taxRate: 0.10,\r\n  taxTotalToThisBracket: 0,\r\n};\r\nconst marriedJointlySecondBracket: TaxBracket = {\r\n  minimumToQualify: 19751,\r\n  taxRate: 0.12,\r\n  taxTotalToThisBracket: 1975,\r\n};\r\nconst marriedJointlyThirdBracket: TaxBracket = {\r\n  minimumToQualify: 80251,\r\n  taxRate: 0.22,\r\n  taxTotalToThisBracket: 9235,\r\n};\r\nconst marriedJointlyFourthBracket: TaxBracket = {\r\n  minimumToQualify: 171051,\r\n  taxRate: 0.24,\r\n  taxTotalToThisBracket: 29211,\r\n};\r\nconst marriedJointlyFifthBracket: TaxBracket = {\r\n  minimumToQualify: 326601,\r\n  taxRate: 0.32,\r\n  taxTotalToThisBracket: 66543,\r\n};\r\nconst marriedJointlySixthBracket: TaxBracket = {\r\n  minimumToQualify: 414701,\r\n  taxRate: 0.35,\r\n  taxTotalToThisBracket: 94735,\r\n};\r\nconst marriedJointlySeventhBracket: TaxBracket = {\r\n  minimumToQualify: 622051,\r\n  taxRate: 0.37,\r\n  taxTotalToThisBracket: 167307.5,\r\n};\r\n\r\nexport const federalIncomeTaxMarriedJointlyArray: TaxBracket[] = [\r\n  federalMarriedJointlyFirstBracket,\r\n  marriedJointlySecondBracket,\r\n  marriedJointlyThirdBracket,\r\n  marriedJointlyFourthBracket,\r\n  marriedJointlyFifthBracket,\r\n  marriedJointlySixthBracket,\r\n  marriedJointlySeventhBracket,\r\n];\r\n\r\nexport const federalIncomeTaxMarriedJointlyObject = {\r\n  firstBracket: federalMarriedJointlyFirstBracket,\r\n  secondBracket: marriedJointlySecondBracket,\r\n  thirdBracket: marriedJointlyThirdBracket,\r\n  fourthBracket: marriedJointlyFourthBracket,\r\n  fifthBracket: marriedJointlyFifthBracket,\r\n  sixthBracket: marriedJointlySixthBracket,\r\n  seventhBracket: marriedJointlySeventhBracket,\r\n};\r\n\r\nexport const federalMarriedSeparateFirstBracket: TaxBracket = {\r\n  minimumToQualify: 0,\r\n  taxRate: 0.10,\r\n  taxTotalToThisBracket: 0,\r\n};\r\nconst marriedSeparateSecondBracket: TaxBracket = {\r\n  minimumToQualify: 9876,\r\n  taxRate: 0.12,\r\n  taxTotalToThisBracket: 987.50,\r\n};\r\nconst marriedSeparateThirdBracket: TaxBracket = {\r\n  minimumToQualify: 40126,\r\n  taxRate: 0.22,\r\n  taxTotalToThisBracket: 4617.50,\r\n};\r\nconst marriedSeparateFourthBracket: TaxBracket = {\r\n  minimumToQualify: 85526,\r\n  taxRate: 0.24,\r\n  taxTotalToThisBracket: 14605.50,\r\n};\r\nconst marriedSeparateFifthBracket: TaxBracket = {\r\n  minimumToQualify: 163301,\r\n  taxRate: 0.32,\r\n  taxTotalToThisBracket: 33271.50,\r\n};\r\nconst marriedSeparateSixthBracket: TaxBracket = {\r\n  minimumToQualify: 207351,\r\n  taxRate: 0.35,\r\n  taxTotalToThisBracket: 47367.50,\r\n};\r\nconst marriedSeparateSeventhBracket: TaxBracket = {\r\n  minimumToQualify: 311026,\r\n  taxRate: 0.37,\r\n  taxTotalToThisBracket: 83653.75,\r\n};\r\n\r\nexport const federalIncomeTaxMarriedSeparateArray: TaxBracket[] = [\r\n  federalMarriedSeparateFirstBracket,\r\n  marriedSeparateSecondBracket,\r\n  marriedSeparateThirdBracket,\r\n  marriedSeparateFourthBracket,\r\n  marriedSeparateFifthBracket,\r\n  marriedSeparateSixthBracket,\r\n  marriedSeparateSeventhBracket,\r\n];\r\n\r\nexport const federalIncomeTaxMarriedSeparateObject = {\r\n  firstBracket: federalMarriedSeparateFirstBracket,\r\n  secondBracket: marriedSeparateSecondBracket,\r\n  thirdBracket: marriedSeparateFourthBracket,\r\n  fourthBracket: marriedSeparateFourthBracket,\r\n  fifthBracket: marriedSeparateFifthBracket,\r\n  sixthBracket: marriedSeparateSixthBracket,\r\n  seventhBracket: marriedSeparateSeventhBracket,\r\n};\r\n","import {\r\n  FederalTaxBreakdown,\r\n  TaxBracket,\r\n  TaxPayload,\r\n} from '../types';\r\nimport {\r\n  MEDICARE_TAX_RATE,\r\n  SOCIAL_SECURITY_TAX_RATE,\r\n  SOCIAL_SECURITY_TAX_WAGE_LIMIT,\r\n} from './taxBrackets/constants';\r\nimport {\r\n  federalFirstBracket,\r\n  federalIncomeSingleTaxBracketsArray,\r\n} from './taxBrackets/Federal-IncomeTax-Single';\r\nimport { MaritalStatus } from './data/maritalStatus';\r\nimport {\r\n  federalIncomeTaxMarriedJointlyArray,\r\n  federalIncomeTaxMarriedSeparateArray,\r\n} from './taxBrackets/Federal-IncomeTax-Married';\r\n\r\nexport const findFederalIncomeTaxBracketList = (maritalStatus: string): TaxBracket[] => {\r\n  switch (maritalStatus) {\r\n    case MaritalStatus.Single:\r\n      return federalIncomeSingleTaxBracketsArray;\r\n    case MaritalStatus.MarriedJointly:\r\n      return federalIncomeTaxMarriedJointlyArray;\r\n    case MaritalStatus.MarriedSeparately:\r\n      return federalIncomeTaxMarriedSeparateArray;\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nexport const findFederalIncomeTaxBracket = (\r\n  annualIncome: number,\r\n  federalIncomeTaxBracketList: TaxBracket[],\r\n): TaxBracket => {\r\n  let maxMinimum: TaxBracket = federalFirstBracket;\r\n  federalIncomeTaxBracketList.forEach((bracket) => {\r\n    if (annualIncome > bracket.minimumToQualify\r\n            && bracket.minimumToQualify > maxMinimum.minimumToQualify) {\r\n      maxMinimum = bracket;\r\n    }\r\n  });\r\n\r\n  return maxMinimum;\r\n};\r\n\r\nexport const calculateFederalIncomeTax = (\r\n  annualIncome: number,\r\n  maritalStatus: string,\r\n): TaxPayload => {\r\n  const federalIncomeTaxBracketList: TaxBracket[] = findFederalIncomeTaxBracketList(maritalStatus);\r\n  const {\r\n    minimumToQualify,\r\n    taxRate,\r\n    taxTotalToThisBracket,\r\n  }: TaxBracket = findFederalIncomeTaxBracket(annualIncome, federalIncomeTaxBracketList);\r\n\r\n  const amountTaxed: number = annualIncome - minimumToQualify;\r\n  const taxAmount: number = (amountTaxed * taxRate) + taxTotalToThisBracket;\r\n\r\n  return { taxRate, taxAmount };\r\n};\r\n\r\nexport const calculateSocialSecurityTax = (annualIncome: number): number => {\r\n  if (annualIncome > SOCIAL_SECURITY_TAX_WAGE_LIMIT) {\r\n    return SOCIAL_SECURITY_TAX_WAGE_LIMIT * SOCIAL_SECURITY_TAX_RATE;\r\n  }\r\n  return annualIncome * SOCIAL_SECURITY_TAX_RATE;\r\n};\r\n\r\nexport const calculateMedicareTax = (\r\n  annualIncome: number,\r\n): number => annualIncome * MEDICARE_TAX_RATE;\r\n\r\nexport const calculateFederalTaxes = (\r\n  annualIncome: number,\r\n  maritalStatus: string,\r\n): FederalTaxBreakdown => {\r\n  const {\r\n    taxRate: federalIncomeTaxRate,\r\n    taxAmount: federalIncomeTaxAmount,\r\n  } = calculateFederalIncomeTax(annualIncome, maritalStatus);\r\n  const socialSecurityTaxAmount: number = calculateSocialSecurityTax(annualIncome);\r\n  const medicareTaxAmount: number = calculateMedicareTax(annualIncome);\r\n\r\n  const totalFederalTaxAmount: number = (\r\n    federalIncomeTaxAmount\r\n        + socialSecurityTaxAmount\r\n        + medicareTaxAmount\r\n  );\r\n\r\n  return {\r\n    federalIncomeTaxRate,\r\n    federalIncomeTaxAmount,\r\n    socialSecurityTaxRate: SOCIAL_SECURITY_TAX_RATE,\r\n    socialSecurityTaxAmount,\r\n    medicareTaxRate: MEDICARE_TAX_RATE,\r\n    medicareTaxAmount,\r\n    totalFederalTaxAmount,\r\n  };\r\n};\r\n","export const enum DataItemType {\r\n    Percentage = 'PERCENTAGE',\r\n    DollarAmount = 'DOLLAR AMOUNT',\r\n    DefaultForTesting = 'Default'\r\n}\r\n","import { TaxBracket } from '../../../types';\r\n\r\nexport const ohioFirstBracket: TaxBracket = {\r\n  minimumToQualify: 0,\r\n  taxRate: 0.00495,\r\n  taxTotalToThisBracket: 0,\r\n};\r\nconst secondBracket: TaxBracket = {\r\n  minimumToQualify: 5200,\r\n  taxRate: 0.00990,\r\n  taxTotalToThisBracket: 25.74,\r\n};\r\nconst thirdBracket: TaxBracket = {\r\n  minimumToQualify: 10400,\r\n  taxRate: 0.01980,\r\n  taxTotalToThisBracket: 77.22,\r\n};\r\nconst fourthBracket: TaxBracket = {\r\n  minimumToQualify: 15650,\r\n  taxRate: 0.02476,\r\n  taxTotalToThisBracket: 180.18,\r\n};\r\nconst fifthBracket: TaxBracket = {\r\n  minimumToQualify: 20900,\r\n  taxRate: 0.02969,\r\n  taxTotalToThisBracket: 310.17,\r\n};\r\nconst sixthBracket: TaxBracket = {\r\n  minimumToQualify: 41700,\r\n  taxRate: 0.03465,\r\n  taxTotalToThisBracket: 466.04,\r\n};\r\nconst seventhBracket: TaxBracket = {\r\n  minimumToQualify: 83350,\r\n  taxRate: 0.03960,\r\n  taxTotalToThisBracket: 1186.76,\r\n};\r\nconst eighthBracket: TaxBracket = {\r\n  minimumToQualify: 104250,\r\n  taxRate: 0.04597,\r\n  taxTotalToThisBracket: 2836.10,\r\n};\r\nconst ninthBracket: TaxBracket = {\r\n  minimumToQualify: 208500,\r\n  taxRate: 0.04997,\r\n  taxTotalToThisBracket: 3796.88,\r\n};\r\n\r\nexport const ohioIncomeTaxBracketsArray: TaxBracket[] = [\r\n  ohioFirstBracket,\r\n  secondBracket,\r\n  thirdBracket,\r\n  fourthBracket,\r\n  fifthBracket,\r\n  sixthBracket,\r\n  seventhBracket,\r\n  eighthBracket,\r\n  ninthBracket,\r\n];\r\n\r\nexport const ohioIncomeTaxBracketsObject = {\r\n  ohioFirstBracket,\r\n  secondBracket,\r\n  thirdBracket,\r\n  fourthBracket,\r\n  fifthBracket,\r\n  sixthBracket,\r\n  seventhBracket,\r\n  eighthBracket,\r\n  ninthBracket,\r\n};\r\n","import {\r\n  StateTaxBreakdown,\r\n  TaxBracket,\r\n  TaxPayload,\r\n} from '../types';\r\nimport { StatesWithoutIncomeTax, SupportedStates } from './data/supportedStates';\r\nimport {\r\n  ohioIncomeTaxBracketsArray,\r\n  ohioIncomeTaxBracketsObject,\r\n} from './taxBrackets/stateTaxes/OH-IncomeTax';\r\n\r\nexport const calculateStateIncomeTax = (\r\n  annualIncome: number,\r\n  stateIncomeTaxBracket: TaxBracket,\r\n): TaxPayload => {\r\n  const {\r\n    minimumToQualify,\r\n    taxRate,\r\n    taxTotalToThisBracket,\r\n  }: TaxBracket = stateIncomeTaxBracket;\r\n\r\n  const amountTaxed: number = annualIncome - minimumToQualify;\r\n  const taxAmount: number = (amountTaxed * taxRate) + taxTotalToThisBracket;\r\n\r\n  return { taxRate, taxAmount };\r\n};\r\n\r\nexport const findStateTaxBracketList = (\r\n  state: string,\r\n): TaxBracket[] => {\r\n  switch (state) {\r\n    case SupportedStates.Ohio:\r\n      return ohioIncomeTaxBracketsArray;\r\n    default:\r\n      return [];\r\n  }\r\n};\r\n\r\nexport const findStateIncomeTaxBracket = (\r\n  annualIncome: number,\r\n  stateIncomeBrackets: TaxBracket[],\r\n): TaxBracket => {\r\n  let maxMinimum: TaxBracket = ohioIncomeTaxBracketsObject.ohioFirstBracket;\r\n  stateIncomeBrackets.forEach((bracket: TaxBracket) => {\r\n    if (annualIncome > bracket.minimumToQualify) {\r\n      if (bracket.minimumToQualify > maxMinimum.minimumToQualify) {\r\n        maxMinimum = bracket;\r\n      }\r\n    }\r\n  });\r\n\r\n  return maxMinimum;\r\n};\r\n\r\nexport const calculateStateTaxes = (\r\n  state: string,\r\n  annualIncome: number,\r\n): StateTaxBreakdown => {\r\n  // If it is not a state with income tax\r\n  if (StatesWithoutIncomeTax.includes(state as SupportedStates)) {\r\n    return {\r\n      stateIncomeTaxRate: 0,\r\n      stateIncomeTaxAmount: 0,\r\n      totalStateTaxAmount: 0,\r\n      hasStateIncomeTax: false,\r\n    };\r\n  }\r\n  const stateIncomeTaxBrackets: TaxBracket[] = findStateTaxBracketList(state);\r\n  const stateIncomeTaxBracket: TaxBracket = findStateIncomeTaxBracket(annualIncome,\r\n    stateIncomeTaxBrackets);\r\n  const {\r\n    taxRate: stateIncomeTaxRate,\r\n    taxAmount: stateIncomeTaxAmount,\r\n  } = calculateStateIncomeTax(annualIncome, stateIncomeTaxBracket);\r\n\r\n  return {\r\n    stateIncomeTaxRate,\r\n    stateIncomeTaxAmount,\r\n    totalStateTaxAmount: stateIncomeTaxAmount,\r\n    hasStateIncomeTax: true,\r\n  };\r\n};\r\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\r\nimport { RootState } from '../../app/store';\r\nimport { TaxBreakdown } from '../../types';\r\n\r\ninterface ResultDataState extends TaxBreakdown {\r\n    showContent: boolean\r\n}\r\n\r\nconst initialState: ResultDataState = {\r\n  federal: {\r\n    federalIncomeTaxRate: 0,\r\n    federalIncomeTaxAmount: 0,\r\n    socialSecurityTaxRate: 0,\r\n    socialSecurityTaxAmount: 0,\r\n    medicareTaxRate: 0,\r\n    medicareTaxAmount: 0,\r\n    totalFederalTaxAmount: 0,\r\n  },\r\n  state: {\r\n    stateIncomeTaxRate: 0,\r\n    stateIncomeTaxAmount: 0,\r\n    totalStateTaxAmount: 0,\r\n    hasStateIncomeTax: true,\r\n  },\r\n  grossAnnualIncome: 0,\r\n  totalTaxes: 0,\r\n  netAnnualIncome: 0,\r\n  showContent: false,\r\n};\r\n\r\nexport const resultDataSlice: Slice = createSlice({\r\n  name: 'resultData',\r\n  initialState,\r\n  reducers: {\r\n    updateResultData: (state: ResultDataState,\r\n      action: PayloadAction<ResultDataState>) => action.payload,\r\n    toggleContent: (state: ResultDataState,\r\n      action: PayloadAction<boolean>) => ({ ...state, showContent: action.payload }),\r\n  },\r\n});\r\n\r\nexport const { updateResultData, toggleContent } = resultDataSlice.actions;\r\nexport const selectResultData = (state: RootState): ResultDataState => state.resultDataReducer;\r\n\r\nexport default resultDataSlice.reducer;\r\n","import { createSlice, PayloadAction, Slice } from '@reduxjs/toolkit';\r\nimport { FieldUpdatePayload } from '../../types';\r\nimport { RootState } from '../../app/store';\r\n\r\ninterface InputFormState {\r\n    grossAnnualIncome: string,\r\n    maritalStatus: string,\r\n    selectedState: string\r\n}\r\n\r\nconst initialState: InputFormState = {\r\n  grossAnnualIncome: '',\r\n  maritalStatus: '',\r\n  selectedState: '',\r\n};\r\n\r\nexport const inputFormSlice: Slice = createSlice({\r\n  name: 'inputForm',\r\n  initialState,\r\n  reducers: {\r\n    handleTextChange: (\r\n      state: InputFormState,\r\n      action: PayloadAction<FieldUpdatePayload>,\r\n    ) => {\r\n      const { field, value } = action.payload;\r\n      return { ...state, [field]: value };\r\n    },\r\n    resetInput: () => initialState,\r\n  },\r\n});\r\n\r\nexport const { handleTextChange, resetInput } = inputFormSlice.actions;\r\n\r\nexport const selectInputForm = (state: RootState): InputFormState => state.inputFormReducer;\r\n\r\nexport default inputFormSlice.reducer;\r\n","import React, { BaseSyntheticEvent, FC } from 'react';\r\n\r\nexport interface SelectMenuProps {\r\n    label: string,\r\n    id: string,\r\n    optionList: (number[] | string[]),\r\n    handleInputChange(e: BaseSyntheticEvent): void,\r\n    testId: string,\r\n    value: number | string\r\n}\r\n\r\nconst SelectMenu: FC<SelectMenuProps> = (props: SelectMenuProps) => {\r\n  const {\r\n    label, id, optionList, handleInputChange, testId, value,\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={id}>\r\n        {label}\r\n        <select\r\n          name={id}\r\n          data-testid={testId}\r\n          id={id}\r\n          value={value}\r\n          onChange={(e: BaseSyntheticEvent) => handleInputChange(e)}\r\n        >\r\n          <option value=\"\" label=\"Select\" disabled />\r\n          {optionList.map((item: number | string) => (\r\n            <option value={item} key={item}>\r\n              {item}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectMenu;\r\n","import React, { BaseSyntheticEvent, FC } from 'react';\r\n\r\nexport interface TextFieldProps {\r\n    label: string,\r\n    id: string,\r\n    handleInputChange(e: BaseSyntheticEvent): void,\r\n    testId: string,\r\n    value: string\r\n}\r\n\r\nconst TextField: FC<TextFieldProps> = (props: TextFieldProps) => {\r\n  const {\r\n    label, id, handleInputChange, testId, value,\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <label htmlFor={id}>\r\n        {label}\r\n        <input\r\n          name={id}\r\n          id={id}\r\n          data-testid={testId}\r\n          value={value}\r\n          onChange={(e: BaseSyntheticEvent) => handleInputChange(e)}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextField;\r\n","import React, { BaseSyntheticEvent, FC } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Button from '@mui/material/Button';\r\nimport { FieldUpdatePayload, InputFormState } from '../../types';\r\nimport { SupportedStatesList } from '../../lib/data/supportedStates';\r\nimport { MaritalStatusList } from '../../lib/data/maritalStatus';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport { handleTextChange, resetInput, selectInputForm } from './inputFormSlice';\r\nimport { AppDispatch } from '../../app/store';\r\nimport SelectMenu from '../selectMenu';\r\nimport TextField from '../textField';\r\n\r\nexport interface InputFormProps {\r\n    submitInput(data: InputFormState): void;\r\n}\r\n\r\nconst InputForm: FC<InputFormProps> = (inputFormProps: InputFormProps) => {\r\n  const inputForm = useAppSelector(selectInputForm);\r\n  const dispatch: AppDispatch = useDispatch();\r\n  const grossAnnualIncomeId = 'grossAnnualIncome';\r\n  const selectedStateId = 'selectedState';\r\n  const maritalStatusId = 'maritalStatus';\r\n\r\n  const { grossAnnualIncome, selectedState, maritalStatus } = inputForm;\r\n  const isEnabled = (\r\n    grossAnnualIncome.length > 0\r\n        && selectedState.length > 0\r\n        && maritalStatus.length > 0\r\n  );\r\n\r\n  const handleInputChange = (e: BaseSyntheticEvent) => {\r\n    const { name, value } = e.target;\r\n    const payload: FieldUpdatePayload = { field: name, value };\r\n    dispatch(handleTextChange(payload));\r\n  };\r\n\r\n  const submitForm = (e: BaseSyntheticEvent) => {\r\n    e.preventDefault();\r\n    dispatch(resetInput(''));\r\n    inputFormProps.submitInput(inputForm);\r\n  };\r\n\r\n  return (\r\n    <div id=\"formContainer\" data-testid=\"input-form\">\r\n      <TextField\r\n        label=\"Gross Annual Income\"\r\n        id={grossAnnualIncomeId}\r\n        handleInputChange={handleInputChange}\r\n        testId=\"grossAnnualIncomeInput\"\r\n        value={grossAnnualIncome}\r\n      />\r\n      <br />\r\n      <SelectMenu\r\n        label=\"Which State do you live in?\"\r\n        id={selectedStateId}\r\n        optionList={SupportedStatesList}\r\n        handleInputChange={handleInputChange}\r\n        testId=\"stateSelect\"\r\n        value={selectedState}\r\n      />\r\n      <br />\r\n      <SelectMenu\r\n        label=\"What is your filing status?\"\r\n        id={maritalStatusId}\r\n        optionList={MaritalStatusList}\r\n        handleInputChange={handleInputChange}\r\n        testId=\"maritalStatusSelect\"\r\n        value={maritalStatus}\r\n      />\r\n      <br />\r\n      <Button\r\n        variant=\"contained\"\r\n        id=\"submit\"\r\n        size=\"small\"\r\n        disabled={!isEnabled}\r\n        onClick={(e: BaseSyntheticEvent) => submitForm(e)}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputForm;\r\n","import React, { FC } from 'react';\r\nimport './dataListItem.css';\r\nimport { Paper, Typography } from '@mui/material';\r\nimport { DataItemType } from '../../lib/data/dataItemType';\r\n\r\nexport interface DataListItemProps {\r\n    title: string,\r\n    value: number,\r\n    type: DataItemType,\r\n    isSublist: boolean\r\n}\r\n\r\nconst DataListItem: FC<DataListItemProps> = (dataListItemProps: DataListItemProps) => {\r\n  const {\r\n    title, value, type, isSublist,\r\n  } = dataListItemProps;\r\n  let valueString: string;\r\n\r\n  const formatterUSD = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n\r\n  const convertToPercent = (rate: number): string => `${parseFloat((rate * 100).toFixed(3))}%`;\r\n\r\n  switch (type) {\r\n    case DataItemType.DollarAmount:\r\n      valueString = formatterUSD.format(value);\r\n      break;\r\n    case DataItemType.Percentage:\r\n      valueString = convertToPercent(value);\r\n      break;\r\n    default:\r\n      valueString = value.toString();\r\n      break;\r\n  }\r\n\r\n  if (isSublist) {\r\n    return (\r\n      <li className=\"dataItem\">\r\n        <p className=\"dataItemTitle\" data-testid=\"dataItemTitle\">\r\n          {`${title}:`}\r\n        </p>\r\n        <p className=\"dataItemValue subListValue\" data-testid=\"dataItemValue\">{valueString}</p>\r\n      </li>\r\n    );\r\n  }\r\n  return (\r\n    <Paper>\r\n      <div className=\"paper-item\">\r\n        <Typography fontWeight=\"bold\" variant=\"h5\">{`${title}:`}</Typography>\r\n        <Typography\r\n          fontWeight=\"bold\"\r\n          className=\"dataItemValue\"\r\n          variant=\"h5\"\r\n          data-testid=\"dataItemValue\"\r\n        >\r\n          {valueString}\r\n        </Typography>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default DataListItem;\r\n","import React, { FC } from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport { AccordionSummary, Typography } from '@mui/material';\r\n\r\ninterface FinancialAccordionSummaryProps {\r\n    title: string,\r\n    amount: number;\r\n    ariaControls: string\r\n}\r\n\r\nconst FinancialAccordionSummary: FC<FinancialAccordionSummaryProps> = (\r\n  props: FinancialAccordionSummaryProps,\r\n) => {\r\n  const { title, amount, ariaControls } = props;\r\n\r\n  const CustomizedAccordionSummary = styled(AccordionSummary)`\r\n    & .MuiAccordionSummary-content {\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }    \r\n  `;\r\n\r\n  const formatterUSD = new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n  });\r\n\r\n  return (\r\n    <CustomizedAccordionSummary\r\n      aria-controls={ariaControls}\r\n    >\r\n      <Typography fontWeight=\"bold\" align=\"left\" variant=\"h5\">\r\n        {title}\r\n      </Typography>\r\n      <Typography fontWeight=\"bold\" align=\"right\" variant=\"h5\">\r\n        {formatterUSD.format(amount)}\r\n      </Typography>\r\n    </CustomizedAccordionSummary>\r\n  );\r\n};\r\n\r\nexport default FinancialAccordionSummary;\r\n","import { styled } from '@mui/material/styles';\r\nimport { Accordion } from '@mui/material';\r\n\r\nexport const CustomizedAccordion = styled(Accordion)`\r\n    & .MuiCollapse-wrapper {\r\n        margin: 0;\r\n    }\r\n    \r\n    & .MuiCollapse-wrapperInner {\r\n        margin: 0;\r\n    }\r\n  `;\r\n","import { styled } from '@mui/material/styles';\r\nimport { AccordionDetails } from '@mui/material';\r\n\r\nexport const CustomizedAccordionDetails = styled(AccordionDetails)`\r\n    padding: 0;\r\n    margin: 0;\r\n    \r\n    div {\r\n      color: red;\r\n    }\r\n  `;\r\n","import React, { FC } from 'react';\r\n\r\nimport DataListItem from '../dataList/dataListItem';\r\nimport { DataItemType } from '../../lib/data/dataItemType';\r\n\r\nimport './federalResultData.css';\r\nimport FinancialAccordionSummary from '../accordion/financialAccordionSummary';\r\nimport { CustomizedAccordion } from '../accordion/customizedAccordion';\r\nimport { CustomizedAccordionDetails } from '../accordion/customizedAccordionDetails';\r\n\r\ninterface FederalResultDataProps {\r\n    federalTaxData: {\r\n        federalIncomeTaxRate: number,\r\n        federalIncomeTaxAmount: number,\r\n        socialSecurityTaxRate: number,\r\n        socialSecurityTaxAmount: number,\r\n        medicareTaxRate: number,\r\n        medicareTaxAmount: number,\r\n        totalFederalTaxAmount: number\r\n    }\r\n}\r\n\r\nconst FederalResultData: FC<FederalResultDataProps> = (props: FederalResultDataProps) => {\r\n  const {\r\n    federalTaxData: {\r\n      federalIncomeTaxRate,\r\n      federalIncomeTaxAmount,\r\n      socialSecurityTaxRate,\r\n      socialSecurityTaxAmount,\r\n      medicareTaxRate,\r\n      medicareTaxAmount,\r\n      totalFederalTaxAmount,\r\n    },\r\n  } = props;\r\n\r\n  return (\r\n    <CustomizedAccordion id=\"federalResultDataContainer\">\r\n      <FinancialAccordionSummary\r\n        title=\"Federal Taxes\"\r\n        amount={totalFederalTaxAmount}\r\n        ariaControls=\"federalTaxPanel\"\r\n      />\r\n      <CustomizedAccordionDetails>\r\n        <DataListItem\r\n          title=\"Federal Income Tax Rate\"\r\n          value={federalIncomeTaxRate}\r\n          type={DataItemType.Percentage}\r\n          isSublist\r\n        />\r\n        <DataListItem\r\n          title=\"Federal Income Tax Amount\"\r\n          value={federalIncomeTaxAmount}\r\n          type={DataItemType.DollarAmount}\r\n          isSublist\r\n        />\r\n        <DataListItem\r\n          title=\"Medicare Security Tax Rate\"\r\n          value={medicareTaxRate}\r\n          type={DataItemType.Percentage}\r\n          isSublist\r\n        />\r\n        <DataListItem\r\n          title=\"Medicare Security Tax Amount\"\r\n          value={medicareTaxAmount}\r\n          type={DataItemType.DollarAmount}\r\n          isSublist\r\n        />\r\n        <DataListItem\r\n          title=\"Social Security Tax Rate\"\r\n          value={socialSecurityTaxRate}\r\n          type={DataItemType.Percentage}\r\n          isSublist\r\n        />\r\n        <DataListItem\r\n          title=\"Social Security Tax Amount\"\r\n          value={socialSecurityTaxAmount}\r\n          type={DataItemType.DollarAmount}\r\n          isSublist\r\n        />\r\n        <DataListItem\r\n          title=\"Total Federal Tax Amount\"\r\n          value={totalFederalTaxAmount}\r\n          type={DataItemType.DollarAmount}\r\n          isSublist\r\n        />\r\n      </CustomizedAccordionDetails>\r\n    </CustomizedAccordion>\r\n  );\r\n};\r\n\r\nexport default FederalResultData;\r\n","import React, { FC } from 'react';\r\n\r\nimport { AccordionSummary } from '@mui/material';\r\n\r\nimport DataListItem from '../dataList/dataListItem';\r\n\r\nimport './stateResultData.css';\r\nimport { DataItemType } from '../../lib/data/dataItemType';\r\nimport FinancialAccordionSummary from '../accordion/financialAccordionSummary';\r\nimport { CustomizedAccordion } from '../accordion/customizedAccordion';\r\nimport { CustomizedAccordionDetails } from '../accordion/customizedAccordionDetails';\r\n\r\nexport interface StateResultDataProps {\r\n    stateIncomeTaxRate: number,\r\n    stateIncomeTaxAmount: number,\r\n    totalStateTaxAmount: number,\r\n    hasStateIncomeTax: boolean\r\n}\r\n\r\nconst StateResultData: FC<StateResultDataProps> = (props: StateResultDataProps) => {\r\n  const {\r\n    stateIncomeTaxRate,\r\n    stateIncomeTaxAmount,\r\n    totalStateTaxAmount,\r\n    hasStateIncomeTax,\r\n  } = props;\r\n\r\n  if (hasStateIncomeTax) {\r\n    return (\r\n      <CustomizedAccordion id=\"stateResultDataContainer\" data-testid=\"state-result-data\">\r\n        <FinancialAccordionSummary\r\n          title=\"State Taxes\"\r\n          amount={totalStateTaxAmount}\r\n          ariaControls=\"stateTaxPanel\"\r\n        />\r\n        <CustomizedAccordionDetails>\r\n          <DataListItem\r\n            title=\"State Income Tax Rate\"\r\n            value={stateIncomeTaxRate}\r\n            type={DataItemType.Percentage}\r\n            isSublist\r\n          />\r\n          <DataListItem\r\n            title=\"State Income Tax Amount\"\r\n            value={stateIncomeTaxAmount}\r\n            type={DataItemType.DollarAmount}\r\n            isSublist\r\n          />\r\n          <DataListItem\r\n            title=\"Total State Tax Amount\"\r\n            value={totalStateTaxAmount}\r\n            type={DataItemType.DollarAmount}\r\n            isSublist\r\n          />\r\n        </CustomizedAccordionDetails>\r\n      </CustomizedAccordion>\r\n    );\r\n  }\r\n  return (\r\n    <CustomizedAccordion id=\"stateResultDataContainer\" disabled>\r\n      <AccordionSummary\r\n        aria-controls=\"stateTaxPanel\"\r\n      >\r\n        Your state has no income tax!\r\n      </AccordionSummary>\r\n    </CustomizedAccordion>\r\n  );\r\n};\r\n\r\nexport default StateResultData;\r\n","import React, { FC } from 'react';\r\nimport './resultData.css';\r\nimport DataListItem from '../dataList/dataListItem';\r\nimport { useAppSelector } from '../../app/hooks';\r\nimport FederalResultData from './federalResultData';\r\nimport StateResultData from './stateResultData';\r\nimport { DataItemType } from '../../lib/data/dataItemType';\r\nimport { selectResultData } from './resultDataSlice';\r\n\r\nconst ResultData: FC = () => {\r\n  const resultData = useAppSelector(selectResultData);\r\n\r\n  const {\r\n    federal,\r\n    // Consider breaking the inside State data from the 'hasStateIncomeTax'\r\n    // value for easier handoff to the props of StateResultData\r\n    state: {\r\n      stateIncomeTaxRate,\r\n      stateIncomeTaxAmount,\r\n      totalStateTaxAmount,\r\n      hasStateIncomeTax,\r\n    },\r\n    grossAnnualIncome,\r\n    totalTaxes,\r\n    netAnnualIncome,\r\n  } = resultData;\r\n\r\n  return (\r\n    <div id=\"resultContainer\" data-testid=\"result-data\">\r\n      <h1>\r\n        <u>Results</u>\r\n      </h1>\r\n      <div id=\"resultData\">\r\n        <DataListItem\r\n          title=\"Gross Annual Income\"\r\n          value={grossAnnualIncome}\r\n          type={DataItemType.DollarAmount}\r\n          isSublist={false}\r\n        />\r\n        <FederalResultData federalTaxData={federal} />\r\n        <StateResultData\r\n          stateIncomeTaxRate={stateIncomeTaxRate}\r\n          stateIncomeTaxAmount={stateIncomeTaxAmount}\r\n          totalStateTaxAmount={totalStateTaxAmount}\r\n          hasStateIncomeTax={hasStateIncomeTax}\r\n        />\r\n        <DataListItem\r\n          title=\"Total Taxes\"\r\n          value={totalTaxes}\r\n          type={DataItemType.DollarAmount}\r\n          isSublist={false}\r\n        />\r\n        <DataListItem\r\n          title=\"Net Annual Income\"\r\n          value={netAnnualIncome}\r\n          type={DataItemType.DollarAmount}\r\n          isSublist={false}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultData;\r\n","import React, { FC } from 'react';\r\nimport './App.css';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { InputFormState, TaxBreakdown } from './types';\r\nimport { AppDispatch } from './app/store';\r\nimport { useAppSelector } from './app/hooks';\r\n\r\nimport { generateTaxReport } from './lib/taxCalculator';\r\nimport {\r\n  toggleContent,\r\n  updateResultData,\r\n} from './components/resultData/resultDataSlice';\r\n\r\nimport InputForm from './components/inputForm/inputForm';\r\nimport ResultData from './components/resultData/resultData';\r\n\r\nconst App: FC = () => {\r\n  const resultData = useAppSelector((state) => state.resultDataReducer);\r\n  const dispatch: AppDispatch = useDispatch();\r\n\r\n  const { showContent: showResultContent } = resultData;\r\n\r\n  const submitInput = (data: InputFormState): void => {\r\n    const { grossAnnualIncome, selectedState, maritalStatus } = data;\r\n    const annualIncome: number = parseInt(grossAnnualIncome, 10);\r\n    const result: TaxBreakdown = generateTaxReport(selectedState, annualIncome, maritalStatus);\r\n\r\n    dispatch(updateResultData(result));\r\n    dispatch(toggleContent(true));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <InputForm submitInput={submitInput} />\r\n      <br />\r\n      { showResultContent ? <ResultData /> : null }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import {\r\n  FederalTaxBreakdown, StateTaxBreakdown, TaxBreakdown,\r\n} from '../types';\r\nimport { calculateFederalTaxes } from './federalTaxCalculator';\r\nimport { calculateStateTaxes } from './stateIncomeTaxCalculator';\r\n\r\nexport const generateTaxReport = (\r\n  state: string,\r\n  annualIncome: number,\r\n  maritalStatus: string,\r\n): TaxBreakdown => {\r\n  const federalTaxes: FederalTaxBreakdown = calculateFederalTaxes(annualIncome, maritalStatus);\r\n  const stateTaxes: StateTaxBreakdown = calculateStateTaxes(state, annualIncome);\r\n\r\n  const { totalFederalTaxAmount } = federalTaxes;\r\n  const { totalStateTaxAmount } = stateTaxes;\r\n\r\n  const totalTaxes: number = (\r\n    totalFederalTaxAmount\r\n        + totalStateTaxAmount\r\n  );\r\n  const netAnnualIncome: number = annualIncome - totalTaxes;\r\n\r\n  return {\r\n    federal: federalTaxes,\r\n    state: stateTaxes,\r\n    grossAnnualIncome: annualIncome,\r\n    totalTaxes,\r\n    netAnnualIncome,\r\n  };\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (onPerfEntry) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit';\r\nimport inputFormReducer from '../components/inputForm/inputFormSlice';\r\nimport resultDataReducer from '../components/resultData/resultDataSlice';\r\n\r\nexport const rootReducer = combineReducers({\r\n  inputFormReducer,\r\n  resultDataReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\n// export type RootState = ReturnType<typeof store.getState>;\r\nexport type Reducer = typeof rootReducer;\r\nexport type RootState = ReturnType<Reducer>\r\n// Inferred type: {\r\n//    inputForm: InputFormState\r\n//    resultData: ResultDataState\r\n// }\r\nexport type Store = typeof store;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport store from './app/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}